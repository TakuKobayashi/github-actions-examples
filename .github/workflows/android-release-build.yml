name: Android Release Build

on:
  push:
    branches:
    - android-build

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        compile-sdk: [35]
        build-tools: [35.0.0]
        commandlinetools-download-url: ['https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip']
        root-project-path: [./Android]

    steps:
    - uses: actions/checkout@v4
    - name: setup ubuntu
      run: |
        sudo apt-get --quiet update --yes
        sudo apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
    - name: setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '17'
    - name: download Android SDK
      working-directory: ${{ matrix.root-project-path }}
      run: |
        wget --quiet --output-document=android-sdk.zip ${{ matrix.commandlinetools-download-url }}
        unzip -d android-sdk-linux android-sdk.zip
        sudo mkdir -p /root/.android
        sudo touch /root/.android/repositories.cfg
        echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "platforms;android-${{ matrix.compile-sdk }}" >/dev/null
        echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "platform-tools" >/dev/null
        echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "build-tools;${{ matrix.build-tools }}" >/dev/null
        export ANDROID_SDK_ROOT=$PWD
        export PATH=$PATH:$PWD/platform-tools/
        chmod +x ./gradlew
        set +o pipefail
        yes | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. --licenses
        set -o pipefail
    - name: setup google-services.json
      working-directory: ${{ matrix.root-project-path }}
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "${GOOGLE_SERVICES_JSON}" >> ./app/google-services.json
    - name: Setup Build Configs
      working-directory: ${{ matrix.root-project-path }}
      env:
        ANDROID_REALSE_BASE64_KEY: ${{ secrets.ANDROID_REALSE_BASE64_KEY }}
        ANDROID_REALSE_KEY_PASSWORD: ${{ secrets.ANDROID_REALSE_KEY_PASSWORD }}
      run: |
        echo ${ANDROID_REALSE_BASE64_KEY} | base64 -d > ./release-application-key
        echo "RELEASE_STORE_FILE=`pwd`/release-application-key" >> ./local.properties
        echo "RELEASE_STORE_PASSWORD=${ANDROID_REALSE_KEY_PASSWORD}" >> ./local.properties
        echo "RELEASE_KEY_ALIAS=key0" >> ./local.properties
        echo "RELEASE_KEY_PASSWORD=${ANDROID_REALSE_KEY_PASSWORD}" >> ./local.properties
    - name: Android Release Apk Build
      working-directory: ${{ matrix.root-project-path }}
      run: ./gradlew assembleRelease
    - name: Android Release aab Build
      working-directory: ${{ matrix.root-project-path }}
      run: ./gradlew bundleRelease
    - uses: actions/upload-artifact@v4
      with:
        name: outputs
        path: ${{ matrix.root-project-path }}/app/build/outputs/
  distribution:
    name: AppDistribution
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        root-project-path: [./Android]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: outputs
          path: ${{ matrix.root-project-path }}/outputs
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_ANDROID_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIALS_JSON }}
          file: ${{ matrix.root-project-path }}/outputs/apk/release/app-release.apk