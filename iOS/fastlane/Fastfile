# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    cocoapods
  end

  desc "Distribution of AppStore build"
  lane :store_build do |options|
    select_xcode(options)
    update_team(options)
    import_certificates_and_provisioning_profile(options)
    configuration = 'Release'
    if options[:configuration]
      configuration = options[:configuration]
    end
    build_app({
      configuration: configuration,
      scheme: "github-actions-examples",
      export_method: "app-store",
      output_name: "github-actions-examples-store-#{configuration.downcase}.ipa",
      include_bitcode: true,
      clean: true,
    })
  end

  desc "Distribution of AdHoc build"
  lane :adhoc_build do |options|
    select_xcode(options)
    update_team(options)
    import_certificates_and_provisioning_profile(options)
    configuration = 'Debug'
    if options[:configuration]
      configuration = options[:configuration]
    end
    build_app(
      configuration: configuration,
      scheme: "github-actions-examples",
      export_method: 'ad-hoc',
      export_xcargs: '-allowProvisioningUpdates',
      output_name: "github-actions-examples-adhoc-#{configuration.downcase}.ipa",
      include_bitcode: true,
      clean: true
    )
  end

  private_lane :update_team do |options|
    update_project_team(
      path: "github-actions-examples.xcodeproj",
      teamid: ENV.fetch("TEAM_ID") { "TEAM_ID" }
    )
  end

  desc "select common xcode version"
  private_lane :select_xcode do |options|
    USE_XCODE_VERSION = "11.5"
    xcversion(version: USE_XCODE_VERSION)
  end

  desc "Import Certificates and Provisioning Profile"
  private_lane :import_certificates_and_provisioning_profile do |options|
    keychain_password = ENV.fetch("KEYCHAIN_PASSWORD") { "" }
    cert_password = ENV.fetch("CERT_PASSWORD") { "" }
    certificate_path = options[:certificate_path] || "ios_distribution.p12"
    provisioning_profile = options[:provisioning_profile] || "githubactionsexamples.mobileprovision"
    keychain_name = options[:keychain_name] || "github-actions-examples-chain"
    if options[:create_new_keychain]
      create_keychain(
        name: keychain_name,
        password: keychain_password,
      )
    end
    import_certificate(
      certificate_path: certificate_path,
      certificate_password: cert_password,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
    )
    install_provisioning_profile(path: provisioning_profile)
  end
end
